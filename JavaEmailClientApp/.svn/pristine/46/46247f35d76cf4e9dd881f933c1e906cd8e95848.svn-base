package jeep.test;

import static org.junit.Assert.*;

import java.util.Date;
import java.util.List;

import jeep.data.beans.Contact;
import jeep.data.beans.Folder;
import jeep.data.beans.Message;
import jeep.data.mysql.DatabaseController;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

public class DatabaseControllerTest {

	private DatabaseController dbController = null;

	/**
	 * Sets up the DatabaseController for all the test methods.
	 * 
	 * @throws Exception
	 */
	@Before
	public void setUp() throws Exception {
		dbController = new DatabaseController("localhost", "3306", "root", "",
				"jeep");
	}

	/**
	 * Tests getting all the messages.
	 */
	@Test
	public void getAllMessages() {
		List<Message> messages = dbController.getAllMessages();
		System.out.println("\nNumber of messages: " + messages.size());
		for (Message m : messages)
			System.out.println(m);
	}

	/**
	 * Tests getting the messages from one folder using a folder id.
	 */
	@Test
	public void getMessagesInFolder1() {
		List<Message> messages = dbController.getMessagesInFolder(1);
		System.out.println("\nNumber of messages in inbox: " + messages.size());
		for (Message m : messages)
			System.out.println(m);

	}

	/**
	 * Tests getting the messages from one folder using a folder name.
	 */
	@Test
	public void getMessagesInFolder2() {
		List<Message> messages = dbController.getMessagesInFolder("Sent");
		System.out.println("\nNumber of messages in sent: " + messages.size());
		for (Message m : messages)
			System.out.println(m);

	}

	/**
	 * Tests getting the contacts.
	 */
	@Test
	public void getContacts() {
		List<Contact> contacts = dbController.getContacts();
		System.out.println("\nNumber of contacts: " + contacts.size());
		for (Contact c : contacts)
			System.out.println(c);
	}

	/**
	 * Tests getting the folders.
	 */
	@Test
	public void getFolders() {
		List<Folder> folders = dbController.getFolders();
		System.out.println("\nNumber of folders: " + folders.size());
		for (Folder f : folders)
			System.out.println(f);
	}

	/**
	 * This tests getting the folder id from a folder name.
	 */
	@Test
	public void getFolderIdFromName1() {
		assertEquals(1, dbController.getFolderIdFromName("Inbox"));
	}

	/**
	 * This tests trying to get a folder id from an non-existant name.
	 */
	@Test
	public void getFolderIdFromName2() {
		assertEquals(-1, dbController.getFolderIdFromName("This does not exist"));
	}

	/**
	 * Tests inserting a valid message.
	 */
	@Ignore
	@Test
	public void insertMessage() {
		Date date = new Date();
		String mailContent = "Hi me! How are you? " + "Hi me! How are you? "
				+ "Hi me! How are you? " + "Hi me! How are you? "
				+ "Hi me! How are you? " + "Hi me! How are you? ";
		Message message = new Message(-1, "natgabb@hotmail.com",
				"natgabb@hotmail.com", "", "", mailContent, date, 1);
		assertTrue(dbController.insertMessage(message));
	}

	/**
	 * Tests inserting a message with an invalid folder id.
	 */
	@Ignore
	@Test
	public void insertMessage2() {
		Date date = new Date();
		String mailContent = "Hi me! How are you? " + "Hi me! How are you? "
				+ "Hi me! How are you? " + "Hi me! How are you? "
				+ "Hi me! How are you? " + "Hi me! How are you? ";
		Message message = new Message(-1, "natgabb@hotmail.com",
				"natgabb@hotmail.com", "", "", mailContent, date, 1000);
		assertFalse(dbController.insertMessage(message));
	}

	/**
	 * Tests inserting a valid folder name. (non-existent, this will only work
	 * one)
	 */
	@Ignore
	@Test
	public void insertFolder1() {
		Folder folder = new Folder(-1, "Test");
		assertTrue(dbController.insertFolder(folder));
	}

	/**
	 * Tests for trying to add a Folder with an already existing name.
	 */
	@Ignore
	@Test
	public void insertFolder2() {
		Folder folder = new Folder(-1, "Inbox");
		assertFalse(dbController.insertFolder(folder));
	}

	/**
	 * Tests inserting a new Contact.
	 */
	@Ignore
	@Test
	public void insertContact() {
		Contact contact = new Contact(-1, "Nat", "Gabb", "natgabb@hotmail.com",
				"111-111-1111", "1234 Some Street, Mtl, Qc.",
				"This is a comment.");
		assertTrue(dbController.insertContact(contact));
	}

	/**
	 * This should delete the message with a message id of 1.
	 */
	@Ignore
	@Test
	public void deleteMessage1() {
		Message message = new Message();
		message.setMessageId(1);
		assertTrue(dbController.deleteMessage(message));
	}

	/**
	 * This tries to delete a message that doesn't exist.
	 */
	@Test
	public void deleteMessage2() {
		Message message = new Message();
		message.setMessageId(1000);
		assertFalse(dbController.deleteMessage(message));
	}

	/**
	 * This should delete the contact with a contact id of 1.
	 */
	@Ignore
	@Test
	public void deleteContact1() {
		Contact contact = new Contact();
		contact.setContactId(1);
		assertTrue(dbController.deleteContact(contact));
	}

	/**
	 * This should delete a contact that doesn't exist.
	 */
	@Test
	public void deleteContact2() {
		Contact contact = new Contact();
		contact.setContactId(1000);
		assertFalse(dbController.deleteContact(contact));
	}

	/**
	 * This tries to delete a regular folder.
	 */
	@Ignore
	@Test
	public void deleteFolder1() {
		Folder folder = new Folder(4, "ThisIsATest");
		assertTrue(dbController.insertFolder(folder));
		assertTrue(dbController.deleteFolder(folder));
	}

	/**
	 * This tries to delete a special folder. (Inbox, Sent, and ToSend)
	 */
	@Test
	public void deleteFolder2() {
		Folder folder = new Folder();
		// Inbox
		folder.setFolderId(1);
		assertFalse(dbController.deleteFolder(folder));

		// Sent
		folder.setFolderId(2);
		assertFalse(dbController.deleteFolder(folder));

		// ToSend
		folder.setFolderId(3);
		assertFalse(dbController.deleteFolder(folder));
	}

	/**
	 * This tries to delete a folder that can be deleted, but one that contains
	 * messages. The messages should be deleted.
	 */
	@Test
	public void deleteFolder3() {
		Folder folder = new Folder(-1, "ThisIsATest");
		dbController.insertFolder(folder);
		int folderId = dbController.getFolderIdFromName(folder.getName());
		folder.setFolderId(folderId);
		dbController.insertMessage(new Message(-1, "Jo@Bob.com", "Bob@Jo.com",
				"", "", "Message is super interesting.", new Date(), folderId));
		assertTrue(dbController.deleteFolder(folder));
	}
}
