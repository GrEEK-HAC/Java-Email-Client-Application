package jeep.gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

import jeep.data.beans.Contact;
import jeep.data.beans.MailMessage;
import jeep.data.bundles.MessageController;
import jeep.data.mysql.DatabaseController;

public class ContactPanel extends JPanel {

	private static final long serialVersionUID = 98431495187963243L;
	private DatabaseController dbController = null;
	private ContactTableModel contactTableModel = null;

	private JTable table = null;
	private JScrollPane scrollPan = null;

	private MessageController messages = null;

	JLabel headingLabel = null;

	// SOUTH PANELS
	private JPanel editContactPanel = null;
	JEditorPane commentArea = null;
	JTextField firstNameField = null;
	JTextField lastNameField = null;
	JTextField emailField = null;
	JTextField phoneNumberField = null;
	JTextField addressField = null;

	private boolean isNewContact = true;

	public ContactPanel(DatabaseController dbController,
			ContactTableModel contactTableModel) {
		this.dbController = dbController;
		this.contactTableModel = contactTableModel;
		this.setLayout(new BorderLayout());
		messages = MailApp.getMessageController();
		getTable();
		getDisplayPanel();
		Font font = new Font("Times New Roman", Font.BOLD, 20);
		headingLabel = new JLabel(" ", JLabel.CENTER);
		headingLabel.setFont(font);
		headingLabel.setText("Contacts");
		headingLabel.setIcon(MailApp.createImageIcon("images/contacts.png"));
		add(headingLabel, BorderLayout.NORTH);
		add(scrollPan, BorderLayout.CENTER);
		add(editContactPanel, BorderLayout.SOUTH);
	}

	private void getTable() {

		if (scrollPan != null)
			remove(scrollPan);

		table = new JTable(contactTableModel);
		table.setColumnSelectionAllowed(false);
		table.setRowSelectionAllowed(true);
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		table.setPreferredScrollableViewportSize(new Dimension(600, 200));
		table.setFillsViewportHeight(true);
		table.setAutoCreateRowSorter(true);
		table.getTableHeader().setReorderingAllowed(false);

		// Create the scroll pane and add the table to it.
		scrollPan = new JScrollPane(table);
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				Contact contact = contactTableModel.getContact(table
						.getSelectedRow());
				setDisplayPanel(contact);
			}
		});
	}

	private void getDisplayPanel() {
		editContactPanel = new JPanel();
		editContactPanel.setLayout(new GridBagLayout());

		JLabel label;

		// First name label & field
		label = new JLabel(messages.getString("contact_first"));
		firstNameField = new JTextField(30);
		editContactPanel.add(label, MailApp.makeConstraints(0, 0, 1, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.HORIZONTAL));
		editContactPanel.add(firstNameField, MailApp.makeConstraints(1, 0, 3,
				1, new int[] { 1, 1, 1, 1 }, 1, 1,
				GridBagConstraints.HORIZONTAL));

		// Last name label & field
		label = new JLabel(messages.getString("contact_last"));
		lastNameField = new JTextField(30);
		editContactPanel.add(label, MailApp.makeConstraints(0, 1, 1, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.HORIZONTAL));

		editContactPanel.add(lastNameField, MailApp.makeConstraints(1, 1, 3, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.HORIZONTAL));

		// Email & field
		label = new JLabel(messages.getString("contact_email"));
		emailField = new JTextField(30);
		editContactPanel.add(label, MailApp.makeConstraints(0, 2, 1, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.HORIZONTAL));

		editContactPanel.add(emailField, MailApp.makeConstraints(1, 2, 3, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.HORIZONTAL));

		// Phone number label & field
		label = new JLabel(messages.getString("contact_phoneNumber"));
		phoneNumberField = new JTextField(30);
		editContactPanel.add(label, MailApp.makeConstraints(0, 3, 1, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.HORIZONTAL));

		editContactPanel.add(phoneNumberField, MailApp.makeConstraints(1, 3, 3,
				1, new int[] { 1, 1, 1, 1 }, 1, 1,
				GridBagConstraints.HORIZONTAL));

		// Address label & field
		label = new JLabel(messages.getString("contact_phoneNumber"));
		addressField = new JTextField(30);
		editContactPanel.add(label, MailApp.makeConstraints(0, 4, 1, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.HORIZONTAL));

		editContactPanel.add(addressField, MailApp.makeConstraints(1, 4, 3, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.HORIZONTAL));

		// Comments field
		commentArea = new JEditorPane();
		commentArea.setPreferredSize(new Dimension(500, 100));

		// Put it inside a ScrollPane
		JScrollPane scroll = new JScrollPane(commentArea);

		editContactPanel.add(scroll, MailApp.makeConstraints(0, 5, 4, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.BOTH));

		JPanel buttons = new JPanel();
		buttons.setLayout(new GridBagLayout());

		// Save button
		JButton saveButton = new JButton(messages.getString("contact_save"));
		saveButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				int row = table.getSelectedColumn();
				if (row != -1) {
					Contact contact = contactTableModel.getContact(row);
					if (contact != null) {
						contact.setAddress(addressField.getText());
						contact.setComments(commentArea.getText());
						contact.setEmail(emailField.getText());
						contact.setFirstName(firstNameField.getText());
						contact.setLastName(lastNameField.getText());
						contact.setPhoneNumber(phoneNumberField.getText());
						dbController.updateContact(contact);
					}
				} else if (isNewContact) {
					Contact contact = new Contact();
					contact.setAddress(addressField.getText());
					contact.setComments(commentArea.getText());
					contact.setEmail(emailField.getText());
					contact.setFirstName(firstNameField.getText());
					contact.setLastName(lastNameField.getText());
					contact.setPhoneNumber(phoneNumberField.getText());
					dbController.insertContact(contact);
				}
			}

		});

		buttons.add(saveButton, MailApp.makeConstraints(0, 0, 1, 1, new int[] {
				1, 1, 1, 1 }, 1, 1, GridBagConstraints.NONE));

		// Delete button
		JButton deleteButton = new JButton(messages.getString("contact_delete"));
		deleteButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				int row = table.getSelectedColumn();
				if (row != -1) {
					Contact contact = contactTableModel.getContact(row);
					if (contact != null) {
						dbController.deleteContact(contact.getContactId());
						setDisplayPanel(new Contact());
						isNewContact = true;
					}
				} else if (isNewContact)
					setDisplayPanel(new Contact());
			}

		});
		buttons.add(deleteButton, MailApp.makeConstraints(1, 0, 1, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.NONE));

		// New button
		JButton newButton = new JButton(messages.getString("contact_new"));
		deleteButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				table.clearSelection();
				setDisplayPanel(new Contact());
				isNewContact = true;
			}

		});
		buttons.add(newButton, MailApp.makeConstraints(2, 0, 1, 1, new int[] {
				1, 1, 1, 1 }, 1, 1, GridBagConstraints.NONE));

		editContactPanel.add(buttons, MailApp.makeConstraints(0, 6, 4, 1,
				new int[] { 1, 1, 1, 1 }, 1, 1, GridBagConstraints.BOTH));
	}

	private void setDisplayPanel(Contact contact) {
		firstNameField.setText(contact.getFirstName());
		lastNameField.setText(contact.getLastName());
		emailField.setText(contact.getEmail());
		phoneNumberField.setText(contact.getPhoneNumber());
		addressField.setText(contact.getAddress());
		commentArea.setText(contact.getComments());
	}
}
