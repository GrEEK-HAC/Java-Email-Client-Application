package jeep.mail;

import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import jeep.data.beans.MailConfig;
import jeep.data.beans.MailMessage;
import jeep.gui.MailApp;

/**
 * This controller care of sending and receiving messages using POP and SMTP.
 * 
 * @author Natacha Gabbamonte 0932340
 * 
 */
public class MailSendController {

	private MailConfig mailConfig = null;
	private Logger logger = null;

	public MailSendController(MailConfig mailConfig, Logger logger) {
		this.mailConfig = mailConfig;
		if (logger != null)
			this.logger = logger;
		else
			this.logger = Logger.getLogger(getClass().getName());
	}

	public boolean sendMail(MailMessage message) {
		if (mailConfig.getIsGmailAccount())
			return gmailSend(message);
		else
			return smtpSend(message);
	}

	private boolean smtpSend(MailMessage message) {
		boolean retVal = true;
		Session session = null;

		try {
			// Create a properties object
			Properties smtpProps = new Properties();

			// Add mail configuration to the properties
			smtpProps.put("mail.transport.protocol", "smtp");

			smtpProps.put("mail.smtp.host", mailConfig.getUrlSMTPServer());
			smtpProps.put("mail.smtp.port", mailConfig.getPortSMTPServer());

			if (mailConfig.getIsSMTPAuth()) {
				smtpProps.put("mail.smtp.auth", "true");
				Authenticator auth = new SMTPAuthenticator();
				session = Session.getInstance(smtpProps, auth);
			} else
				session = Session.getDefaultInstance(smtpProps, null);

			// Display the conversation between the client and server
			if (MailApp.DEBUG)
				session.setDebug(true);

			// Create a new message
			MimeMessage msg = new MimeMessage(session);

			// Set the single from field
			msg.setFrom(new InternetAddress(mailConfig.getEmailAddress()));

			// Set the To, CC, and BCC from their ArrayLists
			for (String emailAddress : message.getReceiverEmail())
				msg.addRecipient(Message.RecipientType.TO, new InternetAddress(
						emailAddress, false));

			if (message.getCc() != null)
				for (String emailAddress : message.getCc())
					msg.addRecipient(Message.RecipientType.CC,
							new InternetAddress(emailAddress, false));

			if (message.getBcc() != null)
				for (String emailAddress : message.getBcc())
					msg.addRecipient(Message.RecipientType.BCC,
							new InternetAddress(emailAddress, false));

			// Set the subject
			msg.setSubject(message.getSubject());

			// Set the message body
			msg.setText(message.getMessage());

			// Set some other header information
			msg.setHeader("X-Mailer", "Comp Sci Tech Mailer");
			msg.setSentDate(new Date());

			if (mailConfig.getIsSMTPAuth()) {
				Transport transport = session.getTransport();

				transport.connect();
				transport.sendMessage(msg,
						msg.getRecipients(Message.RecipientType.TO));
				transport.close();
			} else
				Transport.send(msg);

		} catch (NoSuchProviderException e) {
			logger.log(Level.SEVERE, "There is no server at the SMTP address.",
					e);
			retVal = false;
		} catch (AddressException e) {
			logger.log(Level.SEVERE,
					"There is an error in a recipient's address.", e);
			retVal = false;
		} catch (MessagingException e) {
			logger.log(Level.SEVERE, "There is a problem with the message.", e);
			retVal = false;
		} catch (Exception e) {
			logger.log(Level.SEVERE, "There has been an unknown error.", e);
			retVal = false;
		}
		return retVal;
	}

	private class SMTPAuthenticator extends javax.mail.Authenticator {
		public PasswordAuthentication getPasswordAuthentication() {
			String username = mailConfig.getUserNamePOP3();
			String password = mailConfig.getPasswordPOP3();
			if (MailApp.DEBUG)
				System.out.println(username + "\t" + password);
			return new PasswordAuthentication(username, password);
		}
	}

	private boolean gmailSend(MailMessage message) {
		boolean retVal = true;
		Transport transport = null;

		try {
			// Create a properties object
			Properties smtpProps = new Properties();

			// Add mail configuration to the properties
			smtpProps.put("mail.transport.protocol", "smtps");
			smtpProps.put("mail.smtps.host", mailConfig.getUrlSMTPServer());
			smtpProps.put("mail.smtps.auth", "true");
			smtpProps.put("mail.smtps.quitwait", "false");

			// Create a mail session
			Session mailSession = Session.getInstance(smtpProps);

			// Display the conversation between the client and server
			if (MailApp.DEBUG)
				mailSession.setDebug(true);

			// Instantiate the transport object
			transport = mailSession.getTransport();

			// Create a new message
			MimeMessage msg = new MimeMessage(mailSession);

			// Set the To, CC, and BCC from their ArrayLists
			for (String emailAddress : message.getReceiverEmail())
				msg.addRecipient(Message.RecipientType.TO, new InternetAddress(
						emailAddress, false));

			if (message.getCc() != null)
				for (String emailAddress : message.getCc())
					msg.addRecipient(Message.RecipientType.CC,
							new InternetAddress(emailAddress, false));

			if (message.getBcc() != null)
				for (String emailAddress : message.getBcc())
					msg.addRecipient(Message.RecipientType.BCC,
							new InternetAddress(emailAddress, false));

			// Set the subject line
			msg.setSubject(message.getSubject());
			// Set the message body
			msg.setText(message.getMessage());

			// Set some other header information
			msg.setHeader("X-Mailer", "Comp Sci Tech Mailer");
			msg.setSentDate(new Date());

			// Connect and authenticate to the server
			transport.connect(mailConfig.getUrlSMTPServer(),
					Integer.parseInt(mailConfig.getPortSMTPServer()),
					mailConfig.getUserNamePOP3(), mailConfig.getPasswordPOP3());

			// Send the message
			transport.sendMessage(msg, msg.getAllRecipients());

			// Close the connection
			transport.close();

		} catch (NoSuchProviderException e) {
			logger.log(Level.SEVERE, "There is no server at the SMTP address.",
					e);
			retVal = false;
		} catch (AddressException e) {
			logger.log(Level.SEVERE,
					"There is an error in a recipient's address.", e);
			retVal = false;
		} catch (MessagingException e) {
			logger.log(Level.SEVERE, "There is a problem with the message.", e);
			retVal = false;
		} catch (Exception e) {
			logger.log(Level.SEVERE, "There has been an unknown error.", e);
			retVal = false;
		}
		return retVal;
	}
}
