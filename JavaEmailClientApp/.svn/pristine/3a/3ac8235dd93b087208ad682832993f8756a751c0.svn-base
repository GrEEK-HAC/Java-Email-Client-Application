package jeep.data.mysql;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;

import jeep.data.beans.Contact;
import jeep.data.beans.Folder;
import jeep.data.beans.Message;

public class DatabaseController {

	private Logger logger = Logger.getLogger(getClass().getName());
	private Connection connection = null;

	private String url = null;
	private String user = null;
	private String password = null;

	private int[] keyFolders = { 1, 2, 3 };

	public DatabaseController(String urlMySQLServer, String portMySQLServer,
			String user, String password, String database) {
		url = "jdbc:mysql://" + urlMySQLServer + ":" + portMySQLServer + "/"
				+ database;
		this.user = user;
		this.password = password;
	}

	/*
	 * Connects to the database.
	 */
	private void connectToDB() {
		try {
			// Class.forName("com.mysql.jdbc.Driver").newInstance();
			connection = DriverManager.getConnection(url, user, password);
		} catch (SQLException e1) {
			JOptionPane.showMessageDialog(null,
					"Unable to connect to the database:\n" + e1.getMessage(),
					"JDBC Exception", JOptionPane.ERROR_MESSAGE);
			logger.log(Level.SEVERE, "Unable to connect to the database.", e1);
		} catch (Exception e2) {
			JOptionPane.showMessageDialog(null,
					"Unexpected error:\n" + e2.getMessage(), "Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.SEVERE, "Unexpected error.", e2);
			System.exit(1);
		}

	}

	/*
	 * Closes the connection to the database.
	 */
	private void closeDB() {
		try {
			connection.close();
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Unable to close the connection to the database:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Unable to close the connection to the database.", e);
		}
	}

	/**
	 * Returns all the messages.
	 * 
	 * @return A list of all the messages.
	 */
	public List<Message> getAllMessages() {
		List<Message> messages = new ArrayList<Message>();
		Statement statement = null;
		ResultSet resultSet = null;
		connectToDB();
		try {
			statement = connection.createStatement();
			resultSet = statement.executeQuery("Select * from message");
			while (resultSet.next()) {
				messages.add(new Message(resultSet.getInt(1), resultSet
						.getString(2), resultSet.getString(3), resultSet
						.getString(4), resultSet.getString(5), resultSet
						.getString(6), resultSet.getDate(7), resultSet
						.getInt(8)));
			}
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem retrieving records from Message table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem retrieving records from Message table.", e);
			messages = null;
		} finally {
			closeDB();
		}
		return messages;
	}

	/**
	 * Returns a list of messages contained in a specific folder.
	 * 
	 * @param folderName
	 *            The folder name.
	 * @return The list of messages.
	 */
	public List<Message> getMessagesInFolder(String folderName) {
		List<Message> messages = new ArrayList<Message>();
		Statement statement = null;
		ResultSet resultSet = null;
		int folderId;
		connectToDB();
		try {
			statement = connection.createStatement();
			resultSet = statement
					.executeQuery("Select folder_id from folder where name = '"
							+ folderName + "'");
			if (resultSet.next()) {
				folderId = resultSet.getInt(1);
				resultSet.close();
				resultSet = statement
						.executeQuery("Select * from message where folder_id = "
								+ folderId);
				while (resultSet.next()) {
					messages.add(new Message(resultSet.getInt(1), resultSet
							.getString(2), resultSet.getString(3), resultSet
							.getString(4), resultSet.getString(5), resultSet
							.getString(6), resultSet.getDate(7), resultSet
							.getInt(8)));
				}
			}
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem retrieving records from Message table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem retrieving records from Message table.", e);
			messages = null;
		} finally {
			closeDB();
		}
		return messages;
	}

	/**
	 * Returns a list of messages contained in a specific folder.
	 * 
	 * @param folderId
	 *            The folder id.
	 * @return The list of messages.
	 */
	public List<Message> getMessagesInFolder(int folderId) {
		List<Message> messages = new ArrayList<Message>();
		Statement statement = null;
		ResultSet resultSet = null;
		connectToDB();
		try {
			statement = connection.createStatement();
			resultSet = statement
					.executeQuery("Select * from message where folder_id = "
							+ folderId);
			while (resultSet.next()) {
				messages.add(new Message(resultSet.getInt(1), resultSet
						.getString(2), resultSet.getString(3), resultSet
						.getString(4), resultSet.getString(5), resultSet
						.getString(6), resultSet.getDate(7), resultSet
						.getInt(8)));
			}
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem retrieving records from Message table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem retrieving records from Message table.", e);
			messages = null;
		} finally {
			closeDB();
		}
		return messages;
	}

	/**
	 * Returns a list of all the contacts.
	 * 
	 * @return A list of all the contacts.
	 */
	public List<Contact> getContacts() {
		List<Contact> contacts = new ArrayList<Contact>();
		Statement statement = null;
		ResultSet resultSet = null;
		connectToDB();
		try {
			statement = connection.createStatement();
			resultSet = statement.executeQuery("Select * from contact");
			while (resultSet.next()) {
				contacts.add(new Contact(resultSet.getInt(1), resultSet
						.getString(2), resultSet.getString(3), resultSet
						.getString(4), resultSet.getString(5), resultSet
						.getString(6), resultSet.getString(7)));
			}
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem retrieving records from Contact table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem retrieving records from Contact table.", e);
			contacts = null;
		} finally {
			closeDB();
		}
		return contacts;
	}

	/**
	 * Returns a list of all the folders.
	 * 
	 * @return A list of all the folders.
	 */
	public List<Folder> getFolders() {
		List<Folder> folders = new ArrayList<Folder>();
		Statement statement = null;
		ResultSet resultSet = null;
		connectToDB();
		try {
			statement = connection.createStatement();
			resultSet = statement.executeQuery("Select * from folder");
			while (resultSet.next()) {
				folders.add(new Folder(resultSet.getInt(1), resultSet
						.getString(2)));
			}
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem retrieving records from Folder table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem retrieving records from Folder table.", e);
			folders = null;
		} finally {
			closeDB();
		}
		return folders;

	}

	/**
	 * Returns the folder id corresponding to the given name. If the folder name
	 * is not found, -1 is returned.
	 * 
	 * @param name
	 *            The folder's name.
	 * @return The folder's id.
	 */
	public int getFolderIdFromName(String name) {

		int folderId = -1;
		Statement statement = null;
		ResultSet resultSet = null;
		connectToDB();
		try {
			statement = connection.createStatement();
			resultSet = statement
					.executeQuery("Select folder_id from folder where name = '"
							+ name + "'");
			if (resultSet.next())
				folderId = resultSet.getInt(1);
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem retrieving records from Folder table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem retrieving records from Folder table.", e);
		} finally {
			closeDB();
		}
		return folderId;
	}

	/**
	 * Inserts a message to the database.
	 * 
	 * @param message
	 *            The message to be inserted.
	 * @return Whether the insert was successful or not.
	 */
	public boolean insertMessage(Message message) {
		boolean valid = true;
		PreparedStatement statement = null;
		connectToDB();
		try {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String dateAndTime = sdf.format(message.getMessageDate());

			String preparedQuery = "INSERT INTO message (message_id, sender_email, receiver_email,"
					+ " bcc, cc, message, message_date, folder_id) "
					+ "VALUES (NULL,?,?,?,?,?,?,'" + dateAndTime + "',?)";
			statement = connection.prepareStatement(preparedQuery);
			statement.setString(1, message.getSenderEmail());
			statement.setString(2, message.getReceiverEmail());
			statement.setString(3, message.getBcc());
			statement.setString(4, message.getCc());
			statement.setString(5, message.getMessage());
			statement.setInt(6, message.getFolderId());

			int records = statement.executeUpdate();

			if (records != 1)
				valid = false;
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem inserting a record in Message table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem inserting a record in Message table.", e);
			valid = false;
		} finally {
			closeDB();
		}
		return valid;
	}

	/**
	 * Inserts a new folder to the database.
	 * 
	 * @param folder
	 *            The folder to be added.
	 * @return Whether the insert was successful or not.
	 */
	public boolean insertFolder(Folder folder) {
		boolean valid = true;
		PreparedStatement statement = null;
		connectToDB();
		try {
			statement = connection
					.prepareStatement("INSERT INTO folder (folder_id, name) "
							+ "VALUES (NULL,'" + folder.getName() + "')");
			int records = statement.executeUpdate();

			if (records != 1)
				valid = false;
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem inserting a record in Folder table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem inserting a record in Folder table.", e);
			valid = false;
		} finally {
			closeDB();
		}
		return valid;
	}

	/**
	 * Inserts a new contact to the database.
	 * 
	 * @param contact
	 *            The contact to be added.
	 * @return Whether the insert was successful or not.
	 */
	public boolean insertContact(Contact contact) {
		boolean valid = true;
		PreparedStatement statement = null;
		connectToDB();
		try {
			statement = connection
					.prepareStatement("INSERT INTO contact (contact_id, first_name, last_name, email, phone_number, address, comments) "
							+ "VALUES (NULL,'"
							+ contact.getFirstName()
							+ "','"
							+ contact.getLastName()
							+ "','"
							+ contact.getEmail()
							+ "','"
							+ contact.getPhoneNumber()
							+ "','"
							+ contact.getAddress()
							+ "','"
							+ contact.getComments() + "')");

			int records = statement.executeUpdate();

			if (records != 1)
				valid = false;
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem inserting a record in Contact table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem inserting a record in Contact table.", e);
			valid = false;
		} finally {
			closeDB();
		}
		return valid;
	}

	/**
	 * Deletes the message with the specified id from the database.
	 * 
	 * @param message
	 *            The message id of the message to be deleted.
	 * @return Whether or not the deletion was successful.
	 */
	public boolean deleteMessage(int messageId) {

		boolean valid = false;
		PreparedStatement statement = null;
		// If the Id = -1, that means it's a new record.
		if (messageId > 0) {
			valid = true;
			connectToDB();
			try {
				statement = connection
						.prepareStatement("DELETE FROM message WHERE message_id = "
								+ messageId);

				int records = statement.executeUpdate();
				if (records != 1)
					valid = false;
			} catch (SQLException e) {
				JOptionPane.showMessageDialog(
						null,
						"Problem updating a record in Message table:\n"
								+ e.getMessage(), "JDBC Exception",
						JOptionPane.ERROR_MESSAGE);
				logger.log(Level.WARNING,
						"Problem updating a record in Message table.", e);
				valid = false;
			} finally {
				closeDB();
			}
		}
		return valid;
	}

	/**
	 * Deletes the contact with the specified contact id from the database.
	 * 
	 * @param message
	 *            The contact id of the contact to be deleted.
	 * @return Whether or not the deletion was successful.
	 */
	public boolean deleteContact(int contactId) {

		boolean valid = false;
		PreparedStatement statement = null;
		// If the Id = -1, that means it's a new record.
		if (contactId > 0) {
			valid = true;
			connectToDB();
			try {
				statement = connection
						.prepareStatement("DELETE FROM contact WHERE contact_id = "
								+ contactId);

				int records = statement.executeUpdate();
				if (records != 1)
					valid = false;
			} catch (SQLException e) {
				JOptionPane.showMessageDialog(
						null,
						"Problem updating a record in Contact table:\n"
								+ e.getMessage(), "JDBC Exception",
						JOptionPane.ERROR_MESSAGE);
				logger.log(Level.WARNING,
						"Problem updating a record in Contact table.", e);
				valid = false;
			} finally {
				closeDB();
			}
		}
		return valid;
	}

	/**
	 * Deletes the folder with the specified folder id from the database.
	 * 
	 * @param folder
	 *            The folder id of the folder to be deleted.
	 * @return Whether or not the deletion was successful.
	 */
	public boolean deleteFolder(int folderId) {

		boolean valid = false;
		PreparedStatement statement = null;
		// If the Id = -1, that means it's a new record.
		if (folderId > 0) {
			valid = true;
			// These folders are essential and should never be deleted.
			for (int f : keyFolders)
				if (folderId == f)
					valid = false;
			if (valid) {
				// This deletes all the messages that are contained by this
				// folder.
				List<Message> messages = this.getMessagesInFolder(folderId);
				for (Message m : messages)
					this.deleteMessage(m.getMessageId());

				connectToDB();
				try {
					statement = connection
							.prepareStatement("DELETE FROM folder WHERE folder_id = "
									+ folderId);

					int records = statement.executeUpdate();
					if (records != 1)
						valid = false;
				} catch (SQLException e) {
					JOptionPane.showMessageDialog(
							null,
							"Problem updating a record in Folder table:\n"
									+ e.getMessage(), "JDBC Exception",
							JOptionPane.ERROR_MESSAGE);
					logger.log(Level.WARNING,
							"Problem updating a record in Folder table.", e);
					valid = false;
				} finally {
					closeDB();
				}
			}
		}
		return valid;
	}

	/**
	 * Deletes the folder with the specified folder name from the database.
	 * 
	 * @param folder
	 *            The folder name of the folder to be deleted.
	 * @return Whether or not the deletion was successful.
	 */
	public boolean deleteFolder(String folderName) {

		boolean valid = false;
		PreparedStatement statement = null;
		int folderId = this.getFolderIdFromName(folderName);
		// If the Id = -1, that means it's not valid.
		if (folderId > 0) {
			valid = true;
			// These folders are essential and should never be deleted.
			for (int f : keyFolders)
				if (folderId == f)
					valid = false;
			if (valid) {
				// This deletes all the messages that are contained by this
				// folder.
				List<Message> messages = this.getMessagesInFolder(folderId);
				for (Message m : messages)
					this.deleteMessage(m.getMessageId());

				connectToDB();
				try {
					statement = connection
							.prepareStatement("DELETE FROM folder WHERE folder_id = "
									+ folderId);

					int records = statement.executeUpdate();
					if (records != 1)
						valid = false;
				} catch (SQLException e) {
					JOptionPane.showMessageDialog(
							null,
							"Problem updating a record in Folder table:\n"
									+ e.getMessage(), "JDBC Exception",
							JOptionPane.ERROR_MESSAGE);
					logger.log(Level.WARNING,
							"Problem updating a record in Folder table.", e);
					valid = false;
				} finally {
					closeDB();
				}
			}
		}
		return valid;
	}

	/**
	 * Updates a message in the database.
	 * 
	 * @param message
	 *            The message to be updated.
	 * @return Whether the message was updated successfully.
	 */
	public boolean updateMessage(Message message) {

		boolean valid = true;
		PreparedStatement statement = null;
		connectToDB();
		try {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String dateAndTime = sdf.format(message.getMessageDate());
			statement = connection
					.prepareStatement("UPDATE message SET sender_email = '"
							+ message.getSenderEmail()
							+ "', receiver_email = '"
							+ message.getReceiverEmail() + "', bcc = '"
							+ message.getBcc() + "', cc = '" + message.getCc()
							+ "', message = '" + message.getMessage()
							+ "', message_date = '" + dateAndTime
							+ "', folder_id = " + message.getFolderId()
							+ "WHERE message_id = " + message.getMessageId());

			int records = statement.executeUpdate();
			if (records != 1)
				valid = false;
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem updating a record in Message table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem updating a record in Message table.", e);
			valid = false;
		} finally {
			closeDB();
		}
		return valid;
	}

	/**
	 * Updates a contact in the database.
	 * 
	 * @param contact
	 *            The contact to be updated.
	 * @return Whether the contact was updated successfully.
	 */
	public boolean updateContact(Contact contact) {

		boolean valid = true;
		PreparedStatement statement = null;
		connectToDB();
		try {
			statement = connection
					.prepareStatement("UPDATE contact SET first_name = '"
							+ contact.getFirstName() + "', last_name = '"
							+ contact.getLastName() + "', email = '"
							+ contact.getEmail() + "', phone_number = '"
							+ contact.getPhoneNumber() + "', address = '"
							+ contact.getAddress() + "', comments = '"
							+ contact.getComments() + "' WHERE contact_id = "
							+ contact.getContactId());

			int records = statement.executeUpdate();
			if (records != 1)
				valid = false;
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem updating a record in Contact table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem updating a record in Contact table.", e);
			valid = false;
		} finally {
			closeDB();
		}
		return valid;
	}

	/**
	 * Updates a folder in the database.
	 * 
	 * @param contact
	 *            The folder to be updated.
	 * @return Whether the folder was updated successfully.
	 */
	public boolean updateFolder(Folder folder) {

		boolean valid = true;
		PreparedStatement statement = null;
		connectToDB();
		try {
			for (int f : keyFolders)
				if (folder.getFolderId() == f)
					valid = false;
			if (valid) {
				statement = connection
						.prepareStatement("UPDATE folder SET name = '"
								+ folder.getName() + "' WHERE folder_id = "
								+ folder.getFolderId());

				int records = statement.executeUpdate();
				if (records != 1)
					valid = false;
			}
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(
					null,
					"Problem updating a record in Folder table:\n"
							+ e.getMessage(), "JDBC Exception",
					JOptionPane.ERROR_MESSAGE);
			logger.log(Level.WARNING,
					"Problem updating a record in Folder table.", e);
			valid = false;
		} finally {
			closeDB();
		}
		return valid;
	}
}
